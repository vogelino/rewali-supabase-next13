import { ReWaListItemType } from "@/components/ReWaList";
import {
  addBookToRewalist,
  addVideoToRewalist,
  BookWithoutAutogeneratedType,
  getRewalist,
  VideoWithoutAutogeneratedType,
} from "../rewalistUtil";
import useSWR from "swr";
import { supabaseClient as supabase } from "@/utils/supabaseClient";
import { useCallback, useRef } from "react";
import { rawVideoToReWaLiItem } from "../imdbUtils";
import { rawBookToReWaLiItem } from "../googleBooksUtil";

interface UseReWaListReturnType {
  rewalist: ReWaListItemType[];
  error: Error | null;
  addBookToRewalist: (
    book: BookWithoutAutogeneratedType,
  ) => void;
  addVideoToRewalist: (
    video: VideoWithoutAutogeneratedType,
  ) => void;
}

async function addBookMutation(
  book: BookWithoutAutogeneratedType,
  userId: string | undefined,
  rewalist: ReWaListItemType[],
): Promise<ReWaListItemType[]> {
  if (!userId) throw new Error("Not logged in");
  const newBook = await addBookToRewalist(userId, book, supabase);
  const rewalistItem = rawBookToReWaLiItem(newBook);
  return [...rewalist, rewalistItem];
}

async function addVideoMutation(
  video: VideoWithoutAutogeneratedType,
  userId: string | undefined,
  rewalist: ReWaListItemType[],
): Promise<ReWaListItemType[]> {
  if (!userId) throw new Error("Not logged in");
  const newVideo = await addVideoToRewalist(userId, video, supabase);
  const rewalistItem = rawVideoToReWaLiItem(newVideo);
  return [...rewalist, rewalistItem];
}

async function swrFetcher(userId: string | undefined): Promise<ReWaListItemType[]> {
  if (!userId) return [] as ReWaListItemType[];
  return getRewalist(userId, supabase);
}

export function useReWaList(
  userId: string | undefined,
  initialReWaList?: ReWaListItemType[],
): UseReWaListReturnType {
  const lastId = useRef(999999);

  const { mutate, data, error } = useSWR<ReWaListItemType[]>(
    userId,
    swrFetcher,
    { fallbackData: initialReWaList }
  );

  const addBookToRewalist = useCallback((book: BookWithoutAutogeneratedType) => {
    if (!userId || !data) return;
    lastId.current += 1;
    const optimisticItem = rawBookToReWaLiItem({
      ...book,
      id: lastId.current,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    });
    mutate(addBookMutation(book, userId, data), {
      optimisticData: [...data, optimisticItem],
      populateCache: true,
      rollbackOnError: true,
    });
  }, [userId, data])

  const addVideoToRewalist = useCallback((video: VideoWithoutAutogeneratedType) => {
    if (!userId || !data) return;
    lastId.current += 1;
    const optimisticItem = rawVideoToReWaLiItem({
      ...video,
      id: lastId.current,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    });
    mutate(addVideoMutation(video, userId, data), {
      optimisticData: [...data, optimisticItem],
      populateCache: true,
      rollbackOnError: true,
    });
  }, [userId, data])

  return {
    rewalist: data || [],
    error: error || null,
    addBookToRewalist,
    addVideoToRewalist,
  };
}
