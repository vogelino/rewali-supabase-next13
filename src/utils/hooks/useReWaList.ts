import { useAuth } from "@/components/AuthProvider";
import { ReWaListItemType } from "@/components/ReWaList";
import {
	addBookToRewalist,
	addVideoToRewalist,
	BookWithoutAutogeneratedType,
	getRewalist,
	VideoWithoutAutogeneratedType,
} from "../rewalistUtil";
import useSWR from "swr";
import { supabaseClient as supabase } from "@/utils/supabaseClient";
import { useRef } from "react";
import { rawVideoToReWaLiItem } from "../imdbUtils";
import { rawBookToReWaLiItem } from "../googleBooksUtil";

interface UseReWaListReturnType {
	rewalist: ReWaListItemType[];
	error: Error | null;
	addBookToRewalist: (
		book: BookWithoutAutogeneratedType,
		userId: string,
	) => void;
	addVideoToRewalist: (
		video: VideoWithoutAutogeneratedType,
		userId: string,
	) => void;
}

async function addBookMutation(
	book: BookWithoutAutogeneratedType,
	userId: string | undefined,
	rewalist: ReWaListItemType[],
): Promise<ReWaListItemType[]> {
	if (!userId) throw new Error("Not logged in");
	const newBook = await addBookToRewalist(userId, book, supabase);
	const rewalistItem = rawBookToReWaLiItem(newBook);
	return [...rewalist, rewalistItem];
}

async function addVideoMutation(
	video: VideoWithoutAutogeneratedType,
	userId: string | undefined,
	rewalist: ReWaListItemType[],
): Promise<ReWaListItemType[]> {
	if (!userId) throw new Error("Not logged in");
	const newVideo = await addVideoToRewalist(userId, video, supabase);
	const rewalistItem = rawVideoToReWaLiItem(newVideo);
	return [...rewalist, rewalistItem];
}

export function useReWaList(
	initialReWaList?: ReWaListItemType[],
): UseReWaListReturnType {
	const auth = useAuth();
	const lastId = useRef(999999);

	const key = ["rewalist", auth.user?.id || null] as [
		key: string,
		userId: string | null,
	];
	const { mutate, data, error } = useSWR<ReWaListItemType[]>(
		key,
		() => {
			if (!auth.user?.id) return [] as ReWaListItemType[];
			return getRewalist(auth.user.id, supabase);
		},
		{
			fallbackData: initialReWaList || [],
		},
	);
	const rewalist = data || [];

	return {
		rewalist,
		error: error || null,
		addBookToRewalist: (book, userId: string) => {
			if (!userId) return;
			lastId.current += 1;
			const optimisticItem = rawBookToReWaLiItem({
				...book,
				id: lastId.current,
				created_at: new Date().toISOString(),
				updated_at: new Date().toISOString(),
			});
			mutate(addBookMutation(book, userId, rewalist), {
				optimisticData: (oldItems) => [...(oldItems || []), optimisticItem],
				populateCache: true,
				rollbackOnError: true,
			});
		},
		addVideoToRewalist: (video, userId: string) => {
			if (!userId) return;
			lastId.current += 1;
			const optimisticItem = rawVideoToReWaLiItem({
				...video,
				id: lastId.current,
				created_at: new Date().toISOString(),
				updated_at: new Date().toISOString(),
			});
			mutate(addVideoMutation(video, userId, rewalist), {
				optimisticData: (oldItems) => [...(oldItems || []), optimisticItem],
				populateCache: true,
				rollbackOnError: true,
			});
		},
	};
}
