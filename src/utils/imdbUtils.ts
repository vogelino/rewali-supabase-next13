import { ReWaListItemType } from "@/components/ReWaList";
import { Database } from "@/lib/database.types";
import { DatabaseVideoType, VideoWithoutAutogeneratedType } from "./rewalistUtil";

interface IMDBKeyValueType {
  key: string;
  value: string;
}

export interface IMDBSearchResultType {
  id: string;
  description: string;
  image: string;
  resultType: string | "Title";
  title: string;
  runtimeStr: string;
  genres?: string;
  genreList?: IMDBKeyValueType[];
  contentRating: string;
  imDbRatingVotes: string;
  metacriticRating: string;
  plot: string;
  stars?: string;
  starList?: {
    id: string;
    name: string;
  }[];
}

interface IMDBResponseType {
  errorMessage: string;
  expression: string;
  searchType: string | "All";
  results: IMDBSearchResultType[];
}

export async function searchIMDBItems(
  searchTerm?: string | null | undefined
): Promise<IMDBResponseType> {
  if (!searchTerm)
    return {
      results: [],
      errorMessage: "",
      expression: searchTerm || "",
      searchType: "All",
    };
  const key = process.env.IMDB_API_KEY || "";
  const res = await fetch(
    `https://imdb-api.com/en/API/AdvancedSearch/${key}/?title=${encodeURIComponent(
      searchTerm
    )}`
  );
  const items = (await res.json()) as IMDBResponseType;
  return items;
}

export function rawVideoToReWaLiItem(rawVideo: DatabaseVideoType): ReWaListItemType {
  return {
    id: String(rawVideo.id),
    title: rawVideo.title,
    year: String(rawVideo.release_year) || undefined,
    subtitle: rawVideo.description || undefined,
    thumbnail: rawVideo.image || undefined,
    type: "video",
    additionalInfos: {
      Genres: (rawVideo.genres || []).join(", "),
    },
    entitiesInfo: `${(rawVideo.cast_members || []).join(", ")}`,
    createdAt: new Date(rawVideo.created_at),
  };
}

export function imbdVideoToDatabaseVideo(imdbVideo: IMDBSearchResultType): VideoWithoutAutogeneratedType {
  const releaseYear = imdbVideo.description.match(/(19|20)\d{2}/gi);
  const parsedVideo = {
    title: imdbVideo.title,
    description: imdbVideo.plot,
    image: imdbVideo.image,
    cast_members: imdbVideo.starList?.map(({ name }) => name) || [],
    genres: imdbVideo.genreList?.map(({ value }) => value) || [],
    release_year:
      releaseYear && releaseYear.length >= 1 ? +releaseYear[0] : null,
  };
  return parsedVideo
}
